"use strict";(self.webpackChunkscvi_tools_site=self.webpackChunkscvi_tools_site||[]).push([[5597],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3122:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={id:"scanvi",title:"scANVI",sidebar_label:"scANVI (scRNA-seq)"},c=void 0,l={unversionedId:"scanvi",id:"scanvi",isDocsHomePage:!1,title:"scANVI",description:"This page is under construction. For now, please learn more about scANVI in our user guide.",source:"@site/get_started/scanvi.md",sourceDirName:".",slug:"/scanvi",permalink:"/get_started/scanvi",editUrl:"https://github.com/YosefLab/scvi-tools-site/get_started/scanvi.md",tags:[],version:"current",frontMatter:{id:"scanvi",title:"scANVI",sidebar_label:"scANVI (scRNA-seq)"},sidebar:"get_started",previous:{title:"scVI (scRNA-seq)",permalink:"/get_started/scvi"},next:{title:"totalVI (CITE-seq)",permalink:"/get_started/totalvi"}},p=[],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This page is under construction. For now, please learn more about scANVI in our ",(0,o.kt)("a",{parentName:"p",href:"https://docs.scvi-tools.org/en/stable/user_guide/index.html"},"user guide"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# scANVI augments scVI to transfer cell type labels\nimport anndata\nimport scvi\n\n# read data and prepare for scvi-tools\n# adata contains partially observed cell type labels in adata.obs["labels"]\n# Unknown cells have the label "Unknown"\nadata = anndata.read("my_data.h5ad")\nscvi.data.setup_anndata(adata, batch_key="batch", labels_key="labels")\nmodel = scvi.model.SCANVI(adata, "Unknown")\nmodel.train()\n\n# cell type predictions\nadata.obs["predictions"] = model.predict()\n\n# get integrated low-dimensional representation\nadata.obsm["X_scanvi"] = model.get_latent_representation()\n\n# normalized expression\nadata.layers["scanvi_norm"] = model.get_normalized_expression()\n\n# differential expression\nresults = model.differential_expression(\n    groupby="cell types",\n    group1="CD4",\n    group2="CD8"\n)\n')))}d.isMDXComponent=!0}}]);